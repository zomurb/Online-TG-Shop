# --------- –ß–∞—Å—Ç—å 1/3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ---------
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging
import sqlite3
from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage  # <-- –î–æ–±–∞–≤–ª–µ–Ω–æ
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
    CallbackQuery,
    ReplyKeyboardRemove,
    ContentType,
)
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
TOKEN = "YOUUR_BOT_TOKEN"
router = Router()
bot = Bot(
    token=TOKEN, 
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)  
)
dp = Dispatcher(storage=MemoryStorage())  
dp.include_router(router)


class AdminAddProductStates(StatesGroup):
    category = State()
    media = State()
    description = State()
    price = State()
    quantity = State()
class AdminDeleteProductStates(StatesGroup):
    select_product = State()
    confirm = State()
class AdminAddUserStates(StatesGroup):
    username = State()
class AdminPromoStates(StatesGroup):
    code = State()
    kind = State()
    amount = State()
    expires = State()
class OrderStates(StatesGroup):
    wait_custom_city = State()  
    wait_phone = State() 
    wait_city = State()
    wait_comment = State()
    wait_promo = State()
class AdminOrderStates(StatesGroup):
    select_order = State()
    change_status = State()
class AdminBroadcastStates(StatesGroup):
    content = State()
    

def init_db():
    with sqlite3.connect('TG_ON_SH.db') as conn:
        cursor = conn.cursor()
        

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS cart (
                user_id INTEGER NOT NULL,
                product_id INTEGER NOT NULL,
                quantity INTEGER NOT NULL DEFAULT 1,
                UNIQUE(user_id, product_id)
            )
        ''')      
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                phone TEXT NOT NULL,       
                order_data TEXT NOT NULL,
                city TEXT NOT NULL,
                status TEXT DEFAULT 'new',
                order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        conn.commit()
        

        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category TEXT NOT NULL,
                photo_id TEXT NOT NULL,
                description TEXT NOT NULL,
                price REAL NOT NULL,
                quantity INTEGER NOT NULL
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS product_media (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product_id INTEGER NOT NULL,
                file_id TEXT NOT NULL,
                kind TEXT CHECK(kind IN ('photo','video')) NOT NULL,
                position INTEGER NOT NULL DEFAULT 0,
                FOREIGN KEY(product_id) REFERENCES products(id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS admins (
                username TEXT PRIMARY KEY
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS promo_codes (
                code TEXT PRIMARY KEY,
                kind TEXT CHECK(kind IN ('percent','fixed')) NOT NULL,
                amount REAL NOT NULL,
                active INTEGER NOT NULL DEFAULT 1,
                expires_at TEXT
            )
        ''')
        
        conn.commit()
init_db()



def check_and_fix_db():
    try:
        with sqlite3.connect('TG_ON_SH.db') as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–ª–æ–Ω–∫–∏ phone
            cursor = conn.execute("PRAGMA table_info(orders)")
            columns = [column[1] for column in cursor.fetchall()]
            
            if 'phone' not in columns:
                # –≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                conn.execute('''
                    ALTER TABLE orders 
                    ADD COLUMN phone TEXT DEFAULT '–Ω–µ —É–∫–∞–∑–∞–Ω'
                ''')
                conn.commit()
                logging.info("–ö–æ–ª–æ–Ω–∫–∞ phone –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É comment, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            cursor = conn.execute("PRAGMA table_info(orders)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'comment' not in columns:
                conn.execute("""
                    ALTER TABLE orders
                    ADD COLUMN comment TEXT DEFAULT ''
                """)
                conn.commit()
                logging.info("–ö–æ–ª–æ–Ω–∫–∞ comment –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞/—Å–∫–∏–¥–∫–∏/–∏—Ç–æ–≥–∞
            cursor = conn.execute("PRAGMA table_info(orders)")
            columns = [column[1] for column in cursor.fetchall()]
            if 'promo_code' not in columns:
                conn.execute("ALTER TABLE orders ADD COLUMN promo_code TEXT")
            if 'discount' not in columns:
                conn.execute("ALTER TABLE orders ADD COLUMN discount REAL DEFAULT 0")
            if 'total' not in columns:
                conn.execute("ALTER TABLE orders ADD COLUMN total REAL DEFAULT 0")
            conn.commit()

            # –î–æ–±–∞–≤–ª—è–µ–º expires_at –≤ promo_codes –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            cursor = conn.execute("PRAGMA table_info(promo_codes)")
            promo_columns = [column[1] for column in cursor.fetchall()]
            if 'expires_at' not in promo_columns:
                conn.execute("ALTER TABLE promo_codes ADD COLUMN expires_at TEXT")
                conn.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É cart –Ω–∞ –Ω–∞–ª–∏—á–∏–µ size –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ UNIQUE
            cursor = conn.execute("PRAGMA table_info(cart)")
            cart_columns = [column[1] for column in cursor.fetchall()]
            need_cart_migration = 'size' not in cart_columns

            if need_cart_migration:
                logging.info("–ú–∏–≥—Ä–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã cart –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ä–∞–∑–º–µ—Ä–∞")
                conn.execute('''
                    CREATE TABLE IF NOT EXISTS cart_new (
                        user_id INTEGER NOT NULL,
                        product_id INTEGER NOT NULL,
                        size TEXT,
                        quantity INTEGER NOT NULL DEFAULT 1,
                        UNIQUE(user_id, product_id, size)
                    )
                ''')
                # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ä–∞–∑–º–µ—Ä –±—É–¥–µ—Ç NULL
                conn.execute('''
                    INSERT OR IGNORE INTO cart_new (user_id, product_id, quantity)
                    SELECT user_id, product_id, quantity FROM cart
                ''')
                conn.execute('DROP TABLE cart')
                conn.execute('ALTER TABLE cart_new RENAME TO cart')
                conn.commit()
                logging.info("–¢–∞–±–ª–∏—Ü–∞ cart –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞")
                
    except Exception as e:
        logging.critical(f"–û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {str(e)}")

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ GMT-5
def format_dt_gmt_minus5(ts: str) -> str:
    try:
        dt = datetime.strptime(ts, "%Y-%m-%d %H:%M:%S")
        local = dt - timedelta(hours=5)
        return local.strftime("%d.%m.%Y %H:%M")
    except Exception:
        return ts

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–æ –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º)
def main_menu():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="–ö–æ—Ä–∑–∏–Ω–∞")],
            [KeyboardButton(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã")]
        ],
        resize_keyboard=True
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞ —Å –º–µ–Ω—é 
@router.message(Command("start"))
async def start_handler(msg: Message):
    try:
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.execute('''
                INSERT INTO users (user_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
                ON CONFLICT(user_id) DO UPDATE SET
                    username = excluded.username,
                    first_name = excluded.first_name,
                    last_name = excluded.last_name
            ''', (
                msg.from_user.id,
                msg.from_user.username,
                msg.from_user.first_name,
                msg.from_user.last_name
            ))
            conn.commit()
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await msg.answer(
        "üëü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –æ–±—É–≤–∏!",
        reply_markup=main_menu()  # <-- –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
    )

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ß–∞—Å—Ç–∏ 2/3...

@router.message(F.text == "–ö–∞—Ç–∞–ª–æ–≥")
async def show_categories(msg: Message):
    try:
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            categories = conn.execute('''
                SELECT DISTINCT category 
                FROM products 
                WHERE quantity > 0  
            ''').fetchall()

        if not categories:
            return await msg.answer("üò¢ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç. –ó–∞–π–¥–∏—Ç–µ –ø–æ–∑–∂–µ!")
        
        builder = InlineKeyboardBuilder()
        for category in categories:
            builder.add(InlineKeyboardButton(
                text=category["category"],
                callback_data=f"cat_{category['category']}"  # –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞
            ))
        
        builder.adjust(2)
        await msg.answer(
            "üëü –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", 
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        await msg.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.") 
        
@router.callback_query(F.data.startswith("cat_"))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
async def show_products(callback: CallbackQuery):
    try:
        category = callback.data.split("cat_")[1]
        
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            products = conn.execute('''
                SELECT id, description, price 
                FROM products 
                WHERE category = ? AND quantity > 0
            ''', (category,)).fetchall()
        
        builder = InlineKeyboardBuilder()
        for product in products:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "prd_" –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ ‚ñº
            builder.button(
                text=f"{product['description']} - {product['price']} TJS",
                callback_data=f"prd_{product['id']}"  # <- –ï–¥–∏–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å
            )
        
        builder.adjust(1)
        await callback.message.edit_text(
            f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")

@router.callback_query(F.data.startswith("prd_"))
async def show_product(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("prd_")[1])
        
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            product = conn.execute('''
                SELECT * FROM products WHERE id = ?
            ''', (product_id,)).fetchone()

        # –ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞
        builder = InlineKeyboardBuilder()
        for size in ["36","37","38","39","40","41","42","43","44","45"]:
            builder.button(text=f"–†–∞–∑–º–µ—Ä {size}", callback_data=f"size_{product_id}_{size}")
        builder.adjust(3, 3, 4)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ–¥–∏–∞
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            media_items = conn.execute('''
                SELECT file_id, kind FROM product_media
                WHERE product_id = ?
                ORDER BY position ASC
            ''', (product_id,)).fetchall()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≥–∞–ª–µ—Ä–µ—é
        await callback.message.answer_photo(
            photo=product['photo_id'],
            caption=f"üëü –ú–æ–¥–µ–ª—å: {product['description']}\nüí∞ –¶–µ–Ω–∞: {product['price']} TJS",
            reply_markup=builder.as_markup()
        )
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
        for m in media_items[1:]:
            if m['kind'] == 'photo':
                await callback.message.answer_photo(photo=m['file_id'])
            else:
                await callback.message.answer_video(video=m['file_id'])
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
        
@router.callback_query(F.data.startswith("size_"))
async def add_to_cart_with_size(callback: CallbackQuery):
    try:
        _, product_id_str, size = callback.data.split("_", 2)
        product_id = int(product_id_str)
        user_id = callback.from_user.id
        
        with sqlite3.connect('TG_ON_SH.db') as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
            product = conn.execute('''
                SELECT id FROM products 
                WHERE id = ? AND quantity > 0
            ''', (product_id,)).fetchone()
            
            if not product:
                return await callback.answer("‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è", show_alert=True)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ—Ä–∑–∏–Ω—É
            conn.execute('''
                INSERT INTO cart (user_id, product_id, size, quantity)
                VALUES (?, ?, ?, 1)
                ON CONFLICT(user_id, product_id, size) 
                DO UPDATE SET quantity = quantity + 1
            ''', (user_id, product_id, size))
            conn.commit()
        
        await callback.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: —Ä–∞–∑–º–µ—Ä {size}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã: {str(e)}")
        await callback.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")

# –ö–æ—Ä–∑–∏–Ω–∞: –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥
@router.message(F.text == "–ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(msg: Message):
    try:
        user_id = msg.from_user.id
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            items = conn.execute('''
                SELECT p.id, p.description, p.price, c.quantity, c.size 
                FROM cart c 
                JOIN products p ON c.product_id = p.id 
                WHERE c.user_id = ?
            ''', (user_id,)).fetchall()
        
        if not items:
            return await msg.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        
        total = 0
        response = ["üì¶ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:"]
        for item in items:
            line_total = item['price'] * item['quantity']
            response.append(
                f"{item['description']} (—Ä. {item['size'] or '-'} ) x{item['quantity']} = {line_total} TJS"
            )
            total += line_total
        
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
        ]])
        
        await msg.answer(
            "\n".join(response) + f"\n\nüíµ –ò—Ç–æ–≥–æ: {total}TJS",
            reply_markup=kb
        )
    except Exception as e:
        await msg.answer("üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
        
@router.callback_query(F.data == "checkout")
async def process_checkout(callback: CallbackQuery, state: FSMContext):
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä–∑–∏–Ω—ã
        user_id = callback.from_user.id
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            cart_items = conn.execute('''
                SELECT product_id, size, quantity 
                FROM cart 
                WHERE user_id = ?
            ''', (user_id,)).fetchall()

            if not cart_items:
                await callback.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
                return

        # 1.1 –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å
        order_data = ";".join([f"{row['product_id']}:{row['quantity']}:{row['size'] or ''}" for row in cart_items])
        await state.update_data(order_data=order_data)

        # 2. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç
        await callback.message.answer(
            "üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º:",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)],
                    [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        await state.set_state(OrderStates.wait_phone)
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è")

# --------- –ß–∞—Å—Ç—å 3/3: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞ ---------
@router.message(OrderStates.wait_phone, F.contact)
async def process_contact(msg: Message, state: FSMContext):
    try:
        logging.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è user_id={msg.from_user.id}")
        
        phone = msg.contact.phone_number
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–º–µ—Ä: {phone}")
        await state.update_data(phone=phone)
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        await msg.answer("üîÑ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞", reply_markup=ReplyKeyboardRemove())
        logging.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤
        await msg.answer("üèô –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=city_keyboard())
        logging.info("–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        await state.set_state(OrderStates.wait_city)
        logging.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: wait_city")
        
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await msg.answer("üö´ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –Ω–µ–ø–æ–ª–∞–¥–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
        await state.clear()

@router.message(
    StateFilter(OrderStates),
    F.text.func(lambda t: (t or '').strip().lower() in {"–æ—Ç–º–µ–Ω–∞", "‚ùå –æ—Ç–º–µ–Ω–∞", "–æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", "‚ùå –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ"})
)
async def cancel_checkout_anytime(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu())

# --------- –ß–∞—Å—Ç—å 2/3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–æ—Ä–æ–¥–æ–≤ ---------
def city_keyboard():
    try:
        builder = InlineKeyboardBuilder()
        builder.add(
            InlineKeyboardButton(text="–î—É—à–∞–Ω–±–µ", callback_data="city_–î—É—à–∞–Ω–±–µ"),
            InlineKeyboardButton(text="–•—É–¥–∂–∞–Ω–¥", callback_data="city_–•—É–¥–∂–∞–Ω–¥"),
            InlineKeyboardButton(text="–ò—Å—Ç–∞—Ä–∞–≤—à–∞–Ω", callback_data="city_–ò—Å—Ç–∞—Ä–∞–≤—à–∞–Ω"),
            InlineKeyboardButton(text="–î—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥", callback_data="city_other")
        )
        builder.adjust(2, 2)
        return builder.as_markup()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {str(e)}")
        return None

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î:
# 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ç–∞–±–ª–∏—Ü–µ products –µ—Å—Ç—å –∑–∞–ø–∏—Å–∏:
# SELECT * FROM products;

# 2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è –≤–∞—à–µ–≥–æ user_id:
# SELECT * FROM cart WHERE user_id = YOUR_ID;



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
@router.callback_query(OrderStates.wait_city, F.data.startswith("city_"))
async def handle_city_selection(callback: CallbackQuery, state: FSMContext):
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
        if callback.data == "city_other":
            await callback.message.answer("üèô –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥ —Ç–µ–∫—Å—Ç–æ–º:")
            await state.set_state(OrderStates.wait_custom_city)
            await callback.answer()
            return

        city = callback.data.split("_", 1)[1]
        await state.update_data(city=city)
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await callback.message.answer(
            "üè∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'"
        )
        await state.set_state(OrderStates.wait_promo)
        await callback.answer()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è")
        
@router.message(OrderStates.wait_custom_city)
async def process_custom_city(msg: Message, state: FSMContext):
    try:
        user_id = msg.from_user.id
        city = msg.text.strip()
        await state.update_data(city=city)
        await msg.answer("üè∑ –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        await state.set_state(OrderStates.wait_promo)
        
    except Exception as e:
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
        logging.error(f"Custom city error: {str(e)}")

@router.message(OrderStates.wait_promo)
async def process_promo(msg: Message, state: FSMContext):
    code = (msg.text or '').strip()
    if code.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' or not code:
        await msg.answer(
            "üìù –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–∞–¥—Ä–µ—Å, –ø–æ–∂–µ–ª–∞–Ω–∏—è).\n–ï—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        )
        await state.set_state(OrderStates.wait_comment)
        return

    try:
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            row = conn.execute(
                'SELECT code, kind, amount, active, expires_at FROM promo_codes WHERE code = ?',
                (code,)
            ).fetchone()
        if not row or not row['active']:
            await msg.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ (–ø–æ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –î—É—à–∞–Ω–±–µ)
        expires_at = row['expires_at']
        if expires_at:
            try:
                # expires_at —Ö—Ä–∞–Ω–∏—Ç—Å—è –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –î—É—à–∞–Ω–±–µ (Asia/Dushanbe, UTC+5)
                expires_dt_local = datetime.strptime(expires_at, "%Y-%m-%d %H:%M:%S").replace(tzinfo=ZoneInfo("Asia/Dushanbe"))
                now_dushanbe = datetime.now(ZoneInfo("Asia/Dushanbe"))
                if now_dushanbe > expires_dt_local:
                    await msg.answer("‚åõ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏—Å—Ç—ë–∫. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
                    return
            except Exception:
                pass
        await state.update_data(promo_code=row['code'], promo_kind=row['kind'], promo_amount=float(row['amount']))
        await msg.answer("‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω. –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        await state.set_state(OrderStates.wait_comment)
    except Exception as e:
        logging.error(f"–ü—Ä–æ–º–æ–∫–æ–¥ –æ—à–∏–±–∫–∞: {e}")
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞. –ù–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.message(OrderStates.wait_comment)
async def process_order_comment(msg: Message, state: FSMContext):
    try:
        user_id = msg.from_user.id
        comment_text = msg.text.strip()
        if comment_text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
            comment_text = ''

        data = await state.get_data()
        city = data.get('city', '')
        phone = data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        order_data = data.get('order_data', '')

        with sqlite3.connect('TG_ON_SH.db') as conn:
            # –µ—Å–ª–∏ order_data –Ω–µ—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ‚Äî —Å–æ–±–µ—Ä–µ–º –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
            if not order_data:
                conn.row_factory = sqlite3.Row
                cart_items = conn.execute('''
                    SELECT product_id, size, quantity FROM cart WHERE user_id = ?
                ''', (user_id,)).fetchall()
                order_data = ";".join([f"{row['product_id']}:{row['quantity']}:{row['size'] or ''}" for row in cart_items])

            # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã
            subtotal = conn.execute('''
                SELECT COALESCE(SUM(p.price * c.quantity), 0)
                FROM cart c JOIN products p ON p.id = c.product_id
                WHERE c.user_id = ?
            ''', (user_id,)).fetchone()[0] or 0.0

            # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –µ—Å—Ç—å
            promo_code = data.get('promo_code')
            promo_kind = data.get('promo_kind')
            promo_amount = float(data.get('promo_amount', 0) or 0)
            discount = 0.0
            if promo_code and promo_kind in ('percent','fixed') and promo_amount > 0:
                if promo_kind == 'percent':
                    discount = round(subtotal * (promo_amount / 100.0), 2)
                else:
                    discount = float(promo_amount)
                if discount > subtotal:
                    discount = subtotal
            total = round(subtotal - discount, 2)

            conn.execute('''
                INSERT INTO orders (user_id, phone, city, order_data, comment, promo_code, discount, total)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, phone, city, order_data or '', comment_text, promo_code, discount, total))
            new_id = conn.execute('SELECT last_insert_rowid()').fetchone()[0]
            conn.execute('DELETE FROM cart WHERE user_id = ?', (user_id,))
            conn.commit()

        await msg.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\nüÜî –ù–æ–º–µ—Ä: {new_id}\n"
            f"üíµ –°—É–º–º–∞: {subtotal} TJS\n"
            f"üîñ –°–∫–∏–¥–∫–∞: {discount} TJS\n"
            f"üßæ –ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total} TJS\n"
            f"üìä –°—Ç–∞—Ç—É—Å: new\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        await state.clear()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {str(e)}")
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

# –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏–∫–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏ city_keyboard() –Ω–∏–∂–µ
# –ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
@router.message(F.text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def show_orders(msg: Message):
    try:
        user_id = msg.from_user.id
        
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            orders = conn.execute('''
                SELECT id, order_date, city, status 
                FROM orders 
                WHERE user_id = ?
                ORDER BY order_date DESC
            ''', (user_id,)).fetchall()
        
        if not orders:
            return await msg.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        
        response = []
        for order in orders:
            date = format_dt_gmt_minus5(order['order_date'])
            response.append(
                f"üÜî –ó–∞–∫–∞–∑ #{order['id']}\n"
                f"üìÖ {date}\n"
                f"üèô {order['city']}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
            )
        
        await msg.answer("\n\n".join(response))
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")
        await msg.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤")
        
        
init_db()  # –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∑–∞–Ω–æ–≤–æ
check_and_fix_db()  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    
    

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
async def is_admin(username: str | None):
    if not username:
        return False
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º @ –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    username = username.lstrip('@').lower()
    
    with sqlite3.connect('TG_ON_SH.db') as conn:
        cursor = conn.cursor()
        result = cursor.execute(
            "SELECT username FROM admins WHERE LOWER(TRIM(username, '@')) = ?", 
            (username,)
        ).fetchone()
    
    return bool(result)
    
# –ê–¥–º–∏–Ω-–º–µ–Ω—é
def admin_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_add_product")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="admin_delete_product")],
        [InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑—ã", callback_data="admin_view_orders")],
        [InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="admin_add_user")],
        [InlineKeyboardButton(text="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="admin_broadcast")],
        [InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promos")]
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /admin
@router.message(Command("admin"))
async def admin_panel(msg: Message):
    if not await is_admin(msg.from_user.username):
        return await msg.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
    await msg.answer("üëÆ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_menu())
    
# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ callback
@router.callback_query(F.data == "admin_add_user")
async def add_admin_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ username –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞:")
    await state.set_state(AdminAddUserStates.username)
@router.callback_query(F.data == "admin_promos")
async def admin_promos_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.username):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    await callback.message.answer("üè∑ –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞ (–ª–∞—Ç–∏–Ω–∏—Ü–∞/—Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤):")
    await state.set_state(AdminPromoStates.code)
    await callback.answer()

@router.message(AdminPromoStates.code)
async def admin_promos_set_code(msg: Message, state: FSMContext):
    code = (msg.text or '').strip()
    if not code or ' ' in code or len(code) > 32:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –í–≤–µ–¥–∏—Ç–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    await state.update_data(code=code)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="% (–ø—Ä–æ—Ü–µ–Ω—Ç—ã)", callback_data="promo_kind_percent")],
        [InlineKeyboardButton(text="‚ÄìN TJS (—Ñ–∏–∫—Å)", callback_data="promo_kind_fixed")]
    ])
    await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏:", reply_markup=kb)

@router.callback_query(F.data.startswith("promo_kind_"))
async def admin_promos_set_kind(callback: CallbackQuery, state: FSMContext):
    kind = callback.data.split("promo_kind_")[1]
    await state.update_data(kind=kind)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–∫–∏–¥–∫–∏ (—á–∏—Å–ª–æ). –î–ª—è % ‚Äî 5,10,15 –∏ —Ç.–¥.; –¥–ª—è —Ñ–∏–∫—Å–∞ ‚Äî —Å—É–º–º–∞ –≤ TJS.")
    await state.set_state(AdminPromoStates.amount)
    await callback.answer()

@router.message(AdminPromoStates.amount)
async def admin_promos_save(msg: Message, state: FSMContext):
    try:
        amount = float((msg.text or '').replace(',', '.'))
        if amount <= 0:
            raise ValueError
    except Exception:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    code = data.get('code')
    kind = data.get('kind')
    if kind not in ('percent','fixed'):
        await msg.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–∫–∏–¥–∫–∏.")
        return
    await state.update_data(amount=amount)
    await msg.answer(
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD HH:MM (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –¥–ª—è –±–µ—Å—Å—Ä–æ—á–Ω–æ–≥–æ)"
    )
    await state.set_state(AdminPromoStates.expires)

@router.message(AdminPromoStates.expires)
async def admin_promos_save_with_expiry(msg: Message, state: FSMContext):
    text = (msg.text or '').strip()
    expires_at = None
    if text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        try:
            # –æ–∂–∏–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã
            dt = datetime.strptime(text, "%Y-%m-%d %H:%M")
            expires_at = dt.strftime("%Y-%m-%d %H:%M:%S")
        except Exception:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 2025-12-31 23:59. –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
            return
    data = await state.get_data()
    code = data.get('code')
    kind = data.get('kind')
    amount = data.get('amount')
    try:
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.execute('''
                INSERT INTO promo_codes (code, kind, amount, active, expires_at)
                VALUES (?, ?, ?, 1, ?)
                ON CONFLICT(code) DO UPDATE SET kind=excluded.kind, amount=excluded.amount, active=1, expires_at=excluded.expires_at
            ''', (code, kind, amount, expires_at))
            conn.commit()
        exp_text = expires_at or '–±–µ—Å—Å—Ä–æ—á–Ω–æ'
        await msg.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {code} / {kind} / {amount} / –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {exp_text}")
    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
    finally:
        await state.clear()

@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_start(callback: CallbackQuery, state: FSMContext):
    if not await is_admin(callback.from_user.username):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    await callback.message.answer("üì® –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º):")
    await state.set_state(AdminBroadcastStates.content)
    await callback.answer()

@router.message(AdminBroadcastStates.content)
async def admin_broadcast_send(msg: Message, state: FSMContext):
    if not await is_admin(msg.from_user.username):
        await msg.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        await state.clear()
        return
    text = msg.text.strip()
    sent = 0
    failed = 0
    try:
        with sqlite3.connect('TG_ON_SH.db') as conn:
            users = conn.execute('SELECT user_id FROM users').fetchall()
        for row in users:
            try:
                await bot.send_message(chat_id=row[0], text=text)
                sent += 1
            except Exception:
                failed += 1
        await msg.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {sent}, –æ—à–∏–±–æ–∫: {failed}")
    except Exception as e:
        await msg.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {e}")
    finally:
        await state.clear()



@router.message(AdminAddUserStates.username)
async def process_add_admin(msg: Message, state: FSMContext):
    username = msg.text.strip().lower()
    if not username.startswith("@"):
        username = "@" + username
    
    try:
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.execute(
                "INSERT OR IGNORE INTO admins VALUES (?)",
                (username,)
            )
            conn.commit()
        await msg.answer(f"‚úÖ –ê–¥–º–∏–Ω {username} –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è!")
    finally:
        await state.clear()
        
@router.callback_query(F.data == "admin_delete_product")
async def start_delete_product(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")
    await state.set_state(AdminDeleteProductStates.select_product)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ ID —Ç–æ–≤–∞—Ä–∞
@router.message(AdminDeleteProductStates.select_product)
async def process_product_id(msg: Message, state: FSMContext):
    try:
        product_id = int(msg.text)
        
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            product = conn.execute('''
                SELECT * FROM products WHERE id = ?
            ''', (product_id,)).fetchone()
            
            if not product:
                return await msg.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            await state.update_data(product_id=product_id)
            
            kb = InlineKeyboardBuilder()
            kb.button(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="delete_confirm")
            kb.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="delete_cancel")
            
            await msg.answer(
                f"–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä?\n"
                f"ID: {product_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {product['description']}",  # –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
                reply_markup=kb.as_markup()
            )
            await state.set_state(AdminDeleteProductStates.confirm)
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID")

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(AdminDeleteProductStates.confirm, F.data == "delete_confirm")
async def confirm_delete(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    product_id = data['product_id']
    
    try:
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.execute('DELETE FROM products WHERE id = ?', (product_id,))
            conn.commit()
        
        await callback.message.answer("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        await state.clear()
    except Exception as e:
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
    
    await callback.answer()

# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è
@router.callback_query(AdminDeleteProductStates.confirm, F.data == "delete_cancel")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.answer()

# –ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
@router.callback_query(F.data == "admin_add_product")
async def start_add_product(callback: CallbackQuery, state: FSMContext):
    try:
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞)
        if not await is_admin(callback.from_user.username):
            await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
            return

        # 2. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        logging.info(f"–ê–¥–º–∏–Ω @{callback.from_user.username} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

        # 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏
        with sqlite3.connect('TG_ON_SH.db') as conn:
            categories = conn.execute('''
                SELECT DISTINCT category FROM products
            ''').fetchall()

        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        if categories:
            categories_list = "\n".join([f"‚Ä¢ {cat[0]}" for cat in categories])
            await callback.message.answer(
                f"üåø –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories_list}\n\n"
                "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:"
            )
        else:
            await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

        # 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await state.set_state(AdminAddProductStates.category)
        await callback.answer()

    except sqlite3.Error as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ë–î: {str(e)}")
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        await state.clear()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        await callback.message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
        await state.clear()

@router.message(AdminAddProductStates.category)
async def process_category(msg: Message, state: FSMContext):
    try:
        if not msg.text or len(msg.text) > 50:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        
        await state.update_data(category=msg.text.strip())
        await msg.answer(
            "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ —Ç–æ–≤–∞—Ä–∞. –ú–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏.\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô."
        )
        await state.update_data(media_list=[])
        await state.set_state(AdminAddProductStates.media)
    except Exception as e:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: " + str(e))
        await state.clear()

@router.message(AdminAddProductStates.media, F.photo)
async def process_media_photo(msg: Message, state: FSMContext):
    try:
        photo = msg.photo[-1]
        data = await state.get_data()
        media_list = data.get('media_list', [])
        media_list.append({
            'file_id': photo.file_id,
            'kind': 'photo'
        })
        await state.update_data(media_list=media_list)
        await msg.answer(f"‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {len(media_list)}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô.")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

@router.message(AdminAddProductStates.media, F.video)
async def process_media_video(msg: Message, state: FSMContext):
    try:
        video = msg.video
        data = await state.get_data()
        media_list = data.get('media_list', [])
        media_list.append({
            'file_id': video.file_id,
            'kind': 'video'
        })
        await state.update_data(media_list=media_list)
        await msg.answer(f"‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ: {len(media_list)}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –∏–ª–∏ ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô.")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

@router.message(AdminAddProductStates.media)
async def process_media_done_or_text(msg: Message, state: FSMContext):
    # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å–ª–æ–≤—É –ì–æ—Ç–æ–≤–æ
    if msg.text and msg.text.strip().lower() == '–≥–æ—Ç–æ–≤–æ':
        data = await state.get_data()
        media_list = data.get('media_list', [])
        if not media_list:
            await msg.answer("‚ùó –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ.")
            return
        await msg.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤):")
        await state.set_state(AdminAddProductStates.description)
        return
    else:
        await msg.answer("üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –∏–ª–∏ ‚Äò–ì–æ—Ç–æ–≤–æ‚Äô –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")

@router.message(AdminAddProductStates.description)
async def process_description(msg: Message, state: FSMContext):
    try:
        if len(msg.text) > 200 or not msg.text.strip():
            raise ValueError("–ù–µ–≤–µ—Ä–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ")
        
        await state.update_data(description=msg.text.strip())
        await msg.answer("üíµ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 999.99:")
        await state.set_state(AdminAddProductStates.price)
    except Exception as e:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: " + str(e))
        await state.clear()

@router.message(AdminAddProductStates.price)
async def process_price(msg: Message, state: FSMContext):
    try:
        price = float(msg.text.replace(',', '.'))
        if price <= 0 or price > 1000000:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ü–µ–Ω–∞")
        
        await state.update_data(price=round(price, 2))
        await msg.answer("üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
        await state.set_state(AdminAddProductStates.quantity)
    except Exception as e:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: " + str(e))
        await state.clear()

@router.message(AdminAddProductStates.quantity)
async def process_quantity(msg: Message, state: FSMContext):
    try:
        quantity = int(msg.text)
        if quantity <= 0 or quantity > 10000:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        
        data = await state.get_data()
        
        # –ü–æ–ª–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required = {
            'category': str,
            'description': str,
            'price': float
        }
        
        for field, field_type in required.items():
            if field not in data:
                raise ValueError(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field}")
            if not isinstance(data[field], field_type):
                raise TypeError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø {field}")
        
        # SQL-–∑–∞–ø—Ä–æ—Å —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.execute('''
                INSERT INTO products 
                (category, photo_id, description, price, quantity)
        VALUES (?, ?, ?, ?, ?)
            ''', (
                data['category'],
                (data.get('media_list') or [{}])[0].get('file_id', ''),
                data['description'],
                data['price'],
                quantity
            ))
            conn.commit()
            new_id = conn.execute('SELECT last_insert_rowid()').fetchone()[0]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞–≥–∞–ª–µ—Ä–µ—é
            media_list = data.get('media_list', [])
            for idx, m in enumerate(media_list):
                conn.execute('''
                    INSERT INTO product_media (product_id, file_id, kind, position)
                    VALUES (?, ?, ?, ?)
                ''', (new_id, m['file_id'], m['kind'], idx))
            conn.commit()
        
        await msg.answer(f"""
            ‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!
            ID: {new_id}
            üì∏ –ú–µ–¥–∏–∞: {len(data.get('media_list', []))} —à—Ç.
            üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}
            üíµ –¶–µ–Ω–∞: {data['price']} TJS
            üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.
        """)
    except Exception as e:
        error_msg = f"‚õîÔ∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        logging.error(error_msg, exc_info=True)
        await msg.answer(error_msg)
    finally:
        await state.clear()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤
@router.callback_query(F.data == "admin_view_orders")
async def admin_view_orders(callback: CallbackQuery):
    try:
        # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        if not await is_admin(callback.from_user.username):
            await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        # –ü–æ–∫–∞–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–º–µ—Å—Ç–æ –ø–æ–ª–Ω–æ–π –≤—ã–¥–∞—á–∏
        kb = InlineKeyboardBuilder()
        for s in ["new", "processing", "delivered", "cancelled"]:
            kb.button(text=s.capitalize(), callback_data=f"admin_orders_status_{s}")
        kb.adjust(2, 2)
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=kb.as_markup())
        await callback.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {str(e)}", exc_info=True)
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            
@router.callback_query(F.data.startswith("admin_orders_status_"))
async def admin_orders_by_status(callback: CallbackQuery):
    try:
        if not await is_admin(callback.from_user.username):
            await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
            return
        status = callback.data.split("admin_orders_status_")[1]
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            orders = conn.execute('''
                SELECT id, user_id, phone, city, status, order_date, comment, promo_code, discount, total
                FROM orders WHERE status = ?
                ORDER BY order_date DESC LIMIT 20
            ''', (status,)).fetchall()

        if not orders:
            await callback.message.answer("üì≠ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º")
            await callback.answer()
            return

        for order in orders:
            order_date_raw = order['order_date'] if 'order_date' in order.keys() else 'N/A'
            try:
                formatted_date = format_dt_gmt_minus5(order_date_raw)
            except Exception:
                formatted_date = order_date_raw
            phone = order['phone'] if order['phone'] else '–ù–µ —É–∫–∞–∑–∞–Ω'
            city = order['city'] if order['city'] else '–ù–µ —É–∫–∞–∑–∞–Ω'
            promo = order['promo_code'] or '‚Äî'
            discount = order['discount'] or 0
            total = order['total'] or 0

            text = (
                f"üÜî –ó–∞–∫–∞–∑ #{order['id']}\n"
                f"üë§ User ID: {order['user_id']}\n"
                f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üèô –ì–æ—Ä–æ–¥: {city}\n"
                f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
                f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                f"üè∑ –ü—Ä–æ–º–æ: {promo}\n"
                f"üîñ –°–∫–∏–¥–∫–∞: {discount} TJS\n"
                f"üßæ –ò—Ç–æ–≥–æ: {total} TJS\n"
            )

            kb = InlineKeyboardBuilder()
            kb.button(text="–ü–æ–∫–∞–∑–∞—Ç—å", callback_data=f"order_{order['id']}")
            kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order['id']}")
            kb.adjust(2)
            await callback.message.answer(text, reply_markup=kb.as_markup())
        await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

@router.callback_query(F.data.startswith("order_"))
async def show_order_details(callback: CallbackQuery, state: FSMContext):
    try:  # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ try –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        order_id = int(callback.data.split("_")[1])
        
        with sqlite3.connect('TG_ON_SH.db') as conn:
            conn.row_factory = sqlite3.Row
            order = conn.execute('''
                SELECT * FROM orders WHERE id = ?
            ''', (order_id,)).fetchone()
            
            if not order:
                await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            products = []
            order_items_str = order['order_data'] or ''
            order_items = [x for x in order_items_str.split(';') if x]
            for item in order_items:
                try:
                    product_id_str, quantity_and_maybe_size = item.split(':', 1)
                    if ':' in quantity_and_maybe_size:
                        quantity_str, size_str = quantity_and_maybe_size.split(':', 1)
                    else:
                        quantity_str, size_str = quantity_and_maybe_size, ''
                    product_id = int(product_id_str)
                    quantity = int(quantity_str)
                except Exception:
                    continue

                product = conn.execute('''
                    SELECT description, price, photo_id 
                    FROM products 
                    WHERE id = ?
                ''', (product_id,)).fetchone()

                if product:
                    size_note = f" (—Ä. {size_str})" if size_str else ''
                    products.append(
                        f"{product['description']}{size_note} x{quantity} - {product['price'] * quantity} TJS"
                    )

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
            if products:
                first_product = conn.execute(
                    'SELECT photo_id FROM products WHERE id = ?',
                    (int(order_items[0].split(':', 1)[0]),)
                ).fetchone()

                if first_product:
                    await callback.message.answer_photo(
                        photo=first_product['photo_id'],
                        caption=(
                            f"üì¶ –ó–∞–∫–∞–∑ #{order['id']}\n"
                            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order['phone']}\n"
                            f"üèô –ì–æ—Ä–æ–¥: {order['city']}\n"
                            f"üìù –ö–æ–º–º–µ–Ω—Ç: {order['comment'] if 'comment' in order.keys() and order['comment'] else '‚Äî'}\n"
                            f"üìä –°—Ç–∞—Ç—É—Å: {order['status']}\n"
                            f"üì¶ –¢–æ–≤–∞—Ä—ã:\n" + "\n".join(products)
                        )
                    )

        # –ö–Ω–æ–ø–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"change_status_{order_id}")
        await callback.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup()
        )
        await callback.answer()

    except Exception as e:  # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ except
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_order_details: {str(e)}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞")

@router.callback_query(F.data.startswith("change_status_"))
async def change_order_status(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(callback.from_user.username):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    order_id = int(callback.data.split("_")[2])
    await state.update_data(order_id=order_id)

    builder = InlineKeyboardBuilder()
    for status in ["new", "processing", "delivered", "cancelled"]:
        builder.button(text=status.capitalize(), callback_data=f"set_status_{status}")

    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        reply_markup=builder.as_markup()
    )
    await callback.answer()
    await state.set_state(AdminOrderStates.change_status)
    
@router.callback_query(F.data.startswith("set_status_"))
async def set_new_status(callback: CallbackQuery, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await is_admin(callback.from_user.username):
        await callback.answer("‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return

    new_status = callback.data.split("_")[2]
    data = await state.get_data()

    with sqlite3.connect('TG_ON_SH.db') as conn:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        existing = conn.execute('SELECT id, user_id FROM orders WHERE id = ?', (data.get('order_id'),)).fetchone()
        if not existing:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        conn.execute('''
            UPDATE orders 
            SET status = ? 
            WHERE id = ?
        ''', (new_status, data['order_id']))
        conn.commit()

    await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_status}")
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    try:
        await bot.send_message(existing[1], f"üì¶ –í–∞—à –∑–∞–∫–∞–∑ #{data['order_id']} –æ–±–Ω–æ–≤–ª–µ–Ω: {new_status}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    await callback.answer()
    await state.clear()

# 2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–Ω–æ–ø–∫–∞ –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π callback_data
# –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä—É—é—â–∏–π—Å—è admin_menu –Ω–∏–∂–µ

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ FSM
@router.message(StateFilter(AdminAddProductStates))
async def handle_fsm_errors(msg: Message):
    await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")

# –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –∫–æ–¥ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
import asyncio

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())
